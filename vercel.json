{
  "name": "flow-balance",
  "version": 2,
  "framework": "nextjs",
  "buildCommand": "if [[ \"$DATABASE_URL\" == postgresql://* ]] || [[ \"$DATABASE_URL\" == postgres://* ]]; then echo 'Switching to PostgreSQL schema...' && cp prisma/schema.postgresql.prisma prisma/schema.prisma && npx prisma db push; fi && pnpm db:generate && echo 'Checking seed data...' && node -e \"const { PrismaClient } = require('@prisma/client'); const prisma = new PrismaClient(); prisma.currency.count().then(count => { if (count === 0) { console.log('Importing seed data...'); process.exit(0); } else { console.log('Seed data exists, skipping...'); process.exit(1); } }).catch(() => { console.log('Importing seed data...'); process.exit(0); }).finally(() => { prisma.\\$disconnect(); });\" && pnpm db:seed || echo 'Seed data check completed' && pnpm build",
  "devCommand": "pnpm dev",
  "installCommand": "pnpm install",
  "outputDirectory": ".next",
  "public": false,
  "functions": {
    "src/app/api/**/*.ts": {
      "maxDuration": 30
    }
  },

  "env": {
    "NODE_ENV": "production",
    "NEXT_TELEMETRY_DISABLED": "1"
  },
  "build": {
    "env": {
      "NODE_ENV": "production",
      "NEXT_TELEMETRY_DISABLED": "1"
    }
  },
  "headers": [
    {
      "source": "/api/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "no-cache, no-store, must-revalidate"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    },
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options",
          "value": "SAMEORIGIN"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        }
      ]
    }
  ],
  "redirects": [
    {
      "source": "/health",
      "destination": "/api/health",
      "permanent": false
    }
  ]
}
