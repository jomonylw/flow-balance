// Flow Balance - Personal Finance Management System
// Prisma Schema Definition

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表 - 核心用户信息
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String    // 哈希后的密码
  resetToken       String?   // 密码重置令牌
  resetTokenExpiry DateTime? // 重置令牌过期时间
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // 关联关系
  settings         UserSettings?
  userCurrencies   UserCurrency[]
  customCurrencies Currency[]     // 用户创建的自定义货币
  accounts         Account[]
  categories       Category[]
  transactions     Transaction[]
  tags             Tag[]
  exchangeRates    ExchangeRate[]

  @@map("users")
}

// 用户设置表 - 与用户一对一关系
model UserSettings {
  id               String @id @default(cuid())
  userId           String @unique
  baseCurrencyCode String? // 本位币代码，可为空（初始设置时）
  dateFormat       String @default("YYYY-MM-DD")
  theme            String @default("system") // 主题设置：light, dark, system
  language         String @default("zh") // 语言设置：zh, en
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 关联关系
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  baseCurrency Currency? @relation(fields: [baseCurrencyCode], references: [code])

  @@map("user_settings")
}

// 币种表 - 全局币种信息
model Currency {
  code      String  @id // 例如: USD, EUR, CNY
  name      String  // 例如: US Dollar, Euro, Chinese Yuan
  symbol    String  // 例如: $, €, ¥
  isCustom  Boolean @default(false) // 是否为用户自定义货币
  createdBy String? // 创建者用户ID（仅自定义货币）

  // 关联关系
  userSettings      UserSettings[]
  userCurrencies    UserCurrency[]
  accounts          Account[]      // 使用此货币的账户
  transactions      Transaction[]
  fromExchangeRates ExchangeRate[] @relation("FromCurrency")
  toExchangeRates   ExchangeRate[] @relation("ToCurrency")
  creator           User?          @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("currencies")
}

// 用户可用货币表 - 管理用户可以使用的货币
model UserCurrency {
  id           String   @id @default(cuid())
  userId       String
  currencyCode String
  isActive     Boolean  @default(true) // 是否启用
  order        Int      @default(0) // 显示顺序
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency Currency @relation(fields: [currencyCode], references: [code])

  // 确保同一用户的同一货币只有一条记录
  @@unique([userId, currencyCode])
  @@map("user_currencies")
}

// 汇率表 - 用户自定义汇率管理
model ExchangeRate {
  id           String   @id @default(cuid())
  userId       String
  fromCurrency String   // 源货币代码
  toCurrency   String   // 目标货币代码
  rate         Decimal  // 汇率，使用 Decimal 类型确保精度
  effectiveDate DateTime // 汇率生效日期
  notes        String?  // 备注
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromCurrencyRef Currency @relation("FromCurrency", fields: [fromCurrency], references: [code])
  toCurrencyRef   Currency @relation("ToCurrency", fields: [toCurrency], references: [code])

  // 确保同一用户的同一货币对在同一日期只有一个汇率
  @@unique([userId, fromCurrency, toCurrency, effectiveDate])
  @@map("exchange_rates")
}

// 分类表 - 支持树状结构的分类系统，区分账户性质
model Category {
  id       String      @id @default(cuid())
  userId   String
  name     String
  parentId String?     // 父分类ID，null表示顶级分类
  type     AccountType // 账户类型：资产、负债、收入、支出
  order    Int         @default(0) // 排序字段
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // 关联关系
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]  @relation("CategoryHierarchy")
  accounts     Account[]
  transactions Transaction[]

  @@unique([userId, name, parentId]) // 同一用户下同一父分类中的分类名不能重复
  @@map("categories")
}

// 账户类型枚举 - 区分存量和流量
enum AccountType {
  ASSET     // 资产类（存量）- 现金、银行存款、投资、房产等
  LIABILITY // 负债类（存量）- 信用卡、贷款、应付款等
  INCOME    // 收入类（流量）- 工资、投资收益、其他收入等
  EXPENSE   // 支出类（流量）- 生活费、娱乐、交通等

  @@map("account_types")
}

// 账户表 - 用户的各种账户
model Account {
  id           String   @id @default(cuid())
  userId       String
  categoryId   String
  currencyCode String   // 账户货币，每个账户必须指定货币，该账户的所有交易都必须使用此货币
  name         String
  description  String?
  color        String?  // 账户颜色，用于图表展示等
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category      @relation(fields: [categoryId], references: [id])
  currency     Currency      @relation(fields: [currencyCode], references: [code])
  transactions Transaction[]

  @@unique([userId, name]) // 同一用户下账户名不能重复
  @@map("accounts")
}

// 交易表 - 用户的所有交易记录
model Transaction {
  id           String            @id @default(cuid())
  userId       String
  accountId    String
  categoryId   String
  currencyCode String
  type         TransactionType   // 收入、支出、转账
  amount       Decimal           // 金额，使用 Decimal 类型确保精度
  description  String
  notes        String?           // 备注
  date         DateTime          // 交易日期
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // 关联关系
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account           @relation(fields: [accountId], references: [id])
  category     Category          @relation(fields: [categoryId], references: [id])
  currency     Currency          @relation(fields: [currencyCode], references: [code])
  tags         TransactionTag[]  // 多对多关系

  // 注意：由于Prisma不支持条件唯一约束，我们在应用层实现每天每账户只能有一笔BALANCE_ADJUSTMENT记录的逻辑
  @@map("transactions")
}

// 交易类型枚举
enum TransactionType {
  INCOME             // 收入
  EXPENSE            // 支出
  BALANCE_ADJUSTMENT // 余额调整（仅用于存量类账户）

  @@map("transaction_types")
}

// 标签表 - 用户自定义标签
model Tag {
  id        String   @id @default(cuid())
  userId    String
  name      String
  color     String?  // 标签颜色，可选
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions TransactionTag[] // 多对多关系

  @@unique([userId, name]) // 同一用户下标签名不能重复
  @@map("tags")
}

// 交易标签关联表 - 交易和标签的多对多关系
model TransactionTag {
  id            String @id @default(cuid())
  transactionId String
  tagId         String

  // 关联关系
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([transactionId, tagId]) // 同一交易不能重复添加同一标签
  @@map("transaction_tags")
}
